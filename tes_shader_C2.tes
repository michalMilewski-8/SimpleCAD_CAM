#version 400 core

layout( quads, equal_spacing,cw) in;

uniform mat4 mvp;
uniform sampler2D trimm_texture;
uniform vec2 patch_size;

out vec4 f_color;

vec3 drawBrezier4(float t, vec3 B0_, vec3 B1_, vec3 B2_, vec3 B3_) {
	//float T = length(B2_ - B1_);
	//float T0 = -length(B1_ - B0_)/T;
	//float T1 = 0.0f;
    //float T2 = 1.0f;
    //float T3 = T2 + length(B3_ - B2_) / T;
    //float T4 = T3 + 1.0f;
	//float Tm1 = T0 - 1.0f;

	float T0 = -1.0f;
	float T1 = 0.0f;
    float T2 = 1.0f;
    float T3 = 2.0f;
    float T4 = 3.0f;
	float Tm1 = -2.0f;

	float A1 = T2 - t;
	float A2 = T3 - t;
	float A3 = T4 - t;
	float B1 = t - T1;
	float B2 = t - T0;
	float B3 = t - Tm1;

	float N1 = 1;
	float N2 = 0;
	float N3 = 0;
	float N4 = 0;

	float saved = 0.0f;
	float term = 0.0f;

	term = N1/(A1+B1);
	N1 = saved + A1*term;
	saved = B1 * term;

	N2 = saved;
	saved = 0.0f;

	term = N1/(A1+B2);
	N1 = saved + A1*term;
	saved = B2 * term;

	term = N2/(A2+B1);
	N2 = saved + A2*term;
	saved = B1 * term;

	N3 = saved;
	saved = 0.0f;

	term = N1/(A1+B3);
	N1 = saved + A1*term;
	saved = B3 * term;

	term = N2/(A2+B2);
	N2 = saved + A2*term;
	saved = B2 * term;

	term = N3/(A3+B1);
	N3 = saved + A3*term;
	saved = B1 * term;

	N4 = saved;

	return N1*B0_+N2*B1_+N3*B2_+N4*B3_;
}

void main( )
{
	f_color = vec4(1,1,1,1);

	vec3 p00 = gl_in[ 0].gl_Position.xyz;
	vec3 p10 = gl_in[ 1].gl_Position.xyz;
	vec3 p20 = gl_in[ 2].gl_Position.xyz;
	vec3 p30 = gl_in[ 3].gl_Position.xyz;
	vec3 p01 = gl_in[ 4].gl_Position.xyz;
	vec3 p11 = gl_in[ 5].gl_Position.xyz;
	vec3 p21 = gl_in[ 6].gl_Position.xyz;
	vec3 p31 = gl_in[ 7].gl_Position.xyz;
	vec3 p02 = gl_in[ 8].gl_Position.xyz;
	vec3 p12 = gl_in[ 9].gl_Position.xyz;
	vec3 p22 = gl_in[10].gl_Position.xyz;
	vec3 p32 = gl_in[11].gl_Position.xyz;
	vec3 p03 = gl_in[12].gl_Position.xyz;
	vec3 p13 = gl_in[13].gl_Position.xyz;
	vec3 p23 = gl_in[14].gl_Position.xyz;
	vec3 p33 = gl_in[15].gl_Position.xyz;

	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;

	int u_pos = gl_PrimitiveID / int(patch_size.y);
	int v_pos = gl_PrimitiveID - (u_pos * int(patch_size.y));
	float u_rel = (u_pos+ u)/float(patch_size.x);
	float v_rel = (v_pos+ v)/float(patch_size.y);
	vec4 trimming = texture(trimm_texture, vec2(v_rel,u_rel));
	if(trimming.x > 0.5) f_color = vec4(0,0,0,0);

	vec3 bu0 = drawBrezier4(v,p00,p10,p20,p30);
	vec3 bu1 = drawBrezier4(v,p01,p11,p21,p31);
	vec3 bu2 = drawBrezier4(v,p02,p12,p22,p32);
	vec3 bu3 = drawBrezier4(v,p03,p13,p23,p33);


	vec3 position = drawBrezier4(u,bu0,bu1,bu2,bu3);
	gl_Position = mvp * vec4(position,1.0f);

	//gl_Position =mvp * vec4(u,p01.x,v,1);
}